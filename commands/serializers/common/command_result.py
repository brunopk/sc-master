from typing import Optional
from rest_framework.fields import empty
from rest_framework.serializers import Serializer, Field, CharField, BooleanField, IntegerField
from dataclasses import asdict
from sc_master.utils.helpers import remove_none_entries
from sc_master.utils.enums import HardwareMode


class Section(Serializer):

    class Meta:
        ref_name = None

    color = CharField(required=True, max_length=7)

    start = IntegerField(required=True)

    end = IntegerField(required=True)

    is_on = BooleanField(required=True)

    def update(self, instance, validated_data):
        super(Section, self).update(instance, validated_data)

    def create(self, validated_data):
        super(Section, self).create(validated_data)


class Device(Serializer):

    class Meta:
        ref_name = None

    address = CharField(required=True, max_length=7)

    port = IntegerField(required=True)

    number_of_led = IntegerField(required=True)

    def update(self, instance, validated_data):
        super(Device, self).update(instance, validated_data)

    def create(self, validated_data):
        super(Device, self).create(validated_data)


class Mode(Field):

    class Meta:
        ref_name = None

    def to_internal_value(self, data: HardwareMode):
        return data

    def to_representation(self, instance):
        return instance.name



class CommandResult(Serializer):
    """
    Usually DRF serializers are intended to serialize the user input (JSON) to a model that can be handled by the
    framework and may end up in database. In this case, this class is used to pass previously converted dictionaries
    (with `assdict` function):

    ```
    Response(data=assdict(some_object))
    ```

    into another dictionary which is automatically generated by DRF by calling `to_representation` method before
    generating user response. Note that values returned by `to_representation` method have values of Python primitive
    datatypes (or nested dictionaries), in contrast with values in dictionaries returned by `assdict` which will be
    instances of any class (or nested dicts too).
    """

    class Meta:
        ref_name = 'CmdResponse'

    is_system_on = BooleanField(required=True)

    mode = Mode(allow_null=False)

    device = Device(required=False, allow_null=True)

    static_design = Section(required=False, many=True, allow_null=True)

    def to_representation(self, instance):
        # `None` values will be removed from the final result
        # TODO: si hardware mode no es static => remover la lista de static design (agregar esto al Gist para mejora a futuro cuando haya mas de un modo)
        ord_dict_rep = super().to_representation(instance)
        return remove_none_entries(ord_dict_rep)